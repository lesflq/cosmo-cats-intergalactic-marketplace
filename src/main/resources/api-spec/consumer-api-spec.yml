openapi: 3.0.0
info:
  title: Product Management API
  description: API for managing products, categories, and orders
  version: 1.0.0

paths:
  /api/v1/products:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsListDto'
    post:
      summary: Create a new product
      tags:
        - Products
      requestBody:
        description: Product data to create a new product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailsDto'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an existing product
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to update
      requestBody:
        description: Updated product data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailsDto'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailsDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to delete
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/greetings/{name}:
    get:
      summary: Get a cosmo-cat by name
      tags:
        - CosmoCats
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: Name of the cosmo-cat to retrieve
      responses:
        '200':
          description: Cosmo-cat retrieved successfully
          content:
            application/json:
              schema:
                type: string
        '404':
          description: Cosmo-cat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v1/categories:
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        '200':
          description: List of all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO'

    post:
      summary: Create a new category
      tags:
        - Categories
      requestBody:
        description: Category data to create a new category
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/categories/{id}:
    get:
      summary: Get category by ID
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category to retrieve
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an existing category
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category to update
      requestBody:
        description: Updated category data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDTO'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDTO'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a category by ID
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the category to delete
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/order/entry/{orderId}/products/{productId}:
    delete:
      summary: Remove a product from an order
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: ID of the order
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: ID of the product to remove
      responses:
        '204':
          description: Product removed from the order successfully
        '404':
          description: Order or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/order/entry/{orderId}/products:
    get:
      summary: Get all products in an order
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: ID of the order to fetch products for
      responses:
        '200':
          description: List of products in the order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderEntryDTO'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Add a product to an existing order
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: ID of the order to which the product will be added
        - in: query
          name: productId
          required: true
          schema:
            type: integer
          description: ID of the product to add to the order
        - in: query
          name: amount
          required: true
          schema:
            type: integer
          description: Quantity of the product to add
      responses:
        '201':
          description: Product added to the order successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderEntryDTO'
        '400':
          description: Invalid input or order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orders:
    post:
      summary: Create a new order
      tags:
        - Orders
      requestBody:
        description: Order data to create a new order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDTO'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/orders/{orderId}:
    get:
      summary: Get an order by its ID
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: ID of the order to retrieve
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDTO'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an order by its ID
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: ID of the order to delete
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ProductDetailsDto:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the product
        name:
          type: string
          description: Name of the product
        price:
          type: number
          format: double
          description: Price of the product
        categoryId:
          type: integer
          description: ID of the category to which the product belongs
        description:
          type: string
          description: Description of the product

    ProductDetailsListDto:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDetailsDto'

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "400"
        errors:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ParamsViolationDetails'
              - $ref: '#/components/schemas/FieldValidationError'

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: URI reference identifying the error type
        title:
          type: string
          description: A short description of the error
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Detailed description of the error
      required:
        - type
        - title
        - status
        - detail

    ParamsViolationDetails:
      type: object
      properties:
        fieldName:
          type: string
          description: Field where validation error occurred
        reason:
          type: string
          description: Reason for the validation error

    FieldValidationError:
      type: object
      properties:
        field:
          type: string
          description: The field that caused the validation error
        message:
          type: string
          description: Error message describing why the validation failed
      required:
        - field
        - message

    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the category
        name:
          type: string
          description: The name of the category
      required:
        - name

    OrderEntryDTO:
      type: object
      properties:
        productId:
          type: integer
          description: ID of the product
        amount:
          type: integer
          description: Quantity of the product in the order
        price:
          type: number
          format: double
          description: Price of the product in the order
      required:
        - productId
        - amount

    OrderDTO:
      type: object
      properties:
        orderId:
          type: integer
          description: ID of the order
        customerId:
          type: integer
          description: ID of the customer who placed the order
        orderDate:
          type: string
          format: date
          description: Date when the order was placed
        totalAmount:
          type: number
          format: double
          description: Total amount of the order
        status:
          type: string
          description: Current status of the order (e.g., "pending", "completed")
      required:
        - orderId
        - customerId
        - orderDate
        - totalAmount
        - status